# Default values for aws-efs-csi-driver.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: amazon/aws-efs-csi-driver
  tag: "v1.0.0"
  pullPolicy: IfNotPresent

sidecars:
  livenessProbeImage:
    repository: quay.io/k8scsi/livenessprobe
    tag: "v2.0.0"
    pullPolicy: IfNotPresent
  nodeDriverRegistrarImage:
    repository: quay.io/k8scsi/csi-node-driver-registrar
    tag: "v1.3.0"
    pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
priorityClassName: system-node-critical

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: false

## Provide Daemonset PodSecurityPolicy configuration
podSecurity:
  podSecurityPolicy:
    # podSecurity.podSecurityPolicy.create -- If true, create a PodSecurityPolicy resource
    create: false

  readOnlyRootFilesystem: false

  hostIPC: false
  hostNetwork: true
  hostPorts:
    - min: 9809
      max: 9809
  hostPID: false

  # podSecurity.privileged -- If true, allow to run privileged containers
  privileged: true

  # podSecurity.allowedCapabilities -- Allowed capabilites
  allowedCapabilities: []

  # podSecurity.requiredDropCapabilities -- Required drop capabilites
  requiredDropCapabilities:
    - ALL

  # podSecurity.volumes -- Allowed volumes types
  volumes:
    - hostPath
    - secret

  fsGroup:
    rule: RunAsAny
  runAsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny

  allowedHostPaths: []

  # podSecurity.seccompProfiles -- Allowed seccomp profiles
  seccompProfiles:
    - "runtime/default"

  # podSecurity.apparmorProfiles -- Allowed apparmor profiles
  apparmorProfiles:
    - "runtime/default"

  apparmor:
    # podSecurity.apparmor.enabled -- If true, enable apparmor enforcement
    ## see: https://kubernetes.io/docs/tutorials/clusters/apparmor/
    enabled: false


podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  privileged: true

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

podAnnotations: {}

nodeSelector:
  beta.kubernetes.io/os: linux

tolerations: []

affinity: {}

logLevel: 5

hostAliases: {}
  # for cross VPC EFS, you need to poison or overwrite the DNS for the efs volume as per
  # https://docs.aws.amazon.com/efs/latest/ug/efs-different-vpc.html#wt6-efs-utils-step3
  # implementing the suggested solution found here:
  # https://github.com/kubernetes-sigs/aws-efs-csi-driver/issues/240#issuecomment-676849346
  # EFS Vol ID, IP, Region
  # "fs-01234567":
  #   ip: 10.10.2.2
  #   region: us-east-2

dnsPolicy: ""
dnsConfig: {}
  # Example config which uses the AWS nameservers
  # dnsPolicy: "None"
  # dnsConfig:
  #   nameservers:
  #     - 169.254.169.253
